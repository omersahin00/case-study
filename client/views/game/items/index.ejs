<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Items</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .energy-bar-wrapper {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
        }

        .energy-bar-container {
            width: 320px;
            max-width: 90vw;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            height: 28px;
            position: relative;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            overflow: hidden;
        }

                .energy-bar {
            background: linear-gradient(
                90deg,
                #4CAF50 0%,
                #8BC34A 50%,
                #CDDC39 100%
            );
            border-radius: 10px;
            height: 100%;
            width: var(--energy-percentage, 50%);
            position: relative;
            overflow: hidden;
            transition: width 0.5s ease;
        }

        .energy-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                90deg,
                transparent,
                rgba(255, 255, 255, 0.4),
                transparent
            );
            animation: shimmer 1.5s infinite;
        }

        .energy-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            animation: energyShimmer 3s infinite;
        }

        @keyframes energyShimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .energy-text {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2;
            font-size: 14px;
            color: #333;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(255,255,255,0.8);
        }

        .game-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            padding: 30px;
            width: 300px;
            text-align: center;
            backdrop-filter: blur(20px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .game-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
        }

        .level-image {
            width: 120px;
            height: 120px;
            border-radius: 15px;
            margin: 0 auto 20px;
            border: 4px solid #667eea;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
            object-fit: cover;
            display: block;
        }

        .level-image:hover {
            transform: scale(1.05);
        }

        .level-title {
            font-size: 24px;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .level-bar-container {
            background: #e0e0e0;
            border-radius: 15px;
            height: 20px;
            margin: 20px 0;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .level-bar {
            background: linear-gradient(90deg, #4CAF50, #8BC34A);
            height: 100%;
            border-radius: 15px;
            transition: width 0.5s ease;
            position: relative;
            overflow: hidden;
        }

        .level-bar.max-level {
            background: linear-gradient(90deg, #FFD700, #FFA500, #FF6347);
            animation: maxLevelGlow 2s ease-in-out infinite alternate;
        }

        @keyframes maxLevelGlow {
            0% { box-shadow: 0 0 5px #FFD700; }
            100% { box-shadow: 0 0 20px #FFD700, 0 0 30px #FFA500; }
        }

        .level-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .level-text {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
            font-weight: 500;
        }

        .level-text.max-level-text {
            color: #FFD700;
            font-weight: bold;
            font-size: 14px;
            text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        .upgrade-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
            margin-top: 20px;
            width: 100%;
        }

        .upgrade-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .upgrade-btn:hover::before {
            left: 100%;
        }

        .upgrade-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .upgrade-btn:active {
            transform: translateY(0);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .upgrade-btn.stacked {
            background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);
            animation: pulse 1s infinite;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        }

        .upgrade-btn.stacked:hover {
            background: linear-gradient(135deg, #ff5252 0%, #ffb300 100%);
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }

        .upgrade-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .max-level-btn {
            background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%) !important;
            color: #333 !important;
            font-weight: bold;
            cursor: default !important;
            animation: maxLevelPulse 2s ease-in-out infinite;
        }

        @keyframes maxLevelPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        .upgrade-btn:disabled::before {
            display: none;
        }

        .stats-container {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            padding: 10px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 10px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-value {
            font-size: 18px;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            margin-top: 2px;
        }

        .loading {
            position: relative;
        }

        .loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .success-message, .error-message {
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
            font-size: 14px;
            font-weight: 500;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        @media (max-width: 480px) {
            .game-card {
                width: 280px;
                padding: 20px;
            }
            
            .level-image {
                width: 100px;
                height: 100px;
            }
            
            .level-title {
                font-size: 20px;
            }
        }
    </style>
</head>

<body>
    <!-- Enerji Barı -->
    <div class="energy-bar-wrapper">
        <div class="energy-bar-container">
            <div class="energy-bar" data-energy="<%= energy || 0 %>" data-max-energy="<%= maxEnergy || 100 %>"></div>
            <div class="energy-text">
                ⚡ Enerji: <%= energy || 0 %> / <%= maxEnergy || 100 %>
            </div>
        </div>
    </div>

    <div class="game-card">
        <!-- Level fotoğrafı (controller'dan gelecek level bilgisine göre) -->
        <img src="/img/level<%= item.level || 1 %>.png" 
             alt="Level <%= item.level || 1 %>" 
             class="level-image"
             onerror="this.src='/img/level1.png'">
        
        <!-- Level başlığı -->
        <h2 class="level-title">Level <%= item.level || 1 %></h2>
        
        <!-- İstatistikler -->
        <div class="stats-container">
            <div class="stat-item">
                <div class="stat-value"><%= item.level || 1 %></div>
                <div class="stat-label">Seviye</div>
            </div>
            <div class="stat-item">
                <div class="stat-value"><%= item.xp || 0 %></div>
                <div class="stat-label">XP</div>
            </div>
            <div class="stat-item">
                <div class="stat-value"><%= item.levelPeriod || 100 %></div>
                <div class="stat-label">Hedef XP</div>
            </div>
        </div>

        <!-- Level barı -->
        <div class="level-bar-container">
            <% if (item.isMaxLevel) { %>
                <div class="level-bar max-level" style="width: 100%;" data-progress="100" data-max="100"></div>
            <% } else { %>
                <div class="level-bar" data-progress="<%= item.xp || 0 %>" data-max="<%= item.levelPeriod || 100 %>"></div>
            <% } %>
        </div>
        <div class="level-text <%= item.isMaxLevel ? 'max-level-text' : '' %>">
            <% if (item.isMaxLevel) { %>
                🏆 MAX LEVEL REACHED!
            <% } else { %>
                XP: <%= item.xp || 0 %>/<%= item.levelPeriod || 100 %>
            <% } %>
        </div>

        <!-- Mesaj alanı -->
        <div id="messageArea"></div>

        <!-- Upgrade butonu -->
        <% if (item.isMaxLevel) { %>
            <button type="button" class="upgrade-btn max-level-btn" disabled>
                👑 MAX LEVEL
            </button>
        <% } else { %>
            <form id="upgradeForm">
                <input type="hidden" name="itemId" value="<%= itemId || 'default_item' %>">
                <button type="submit" class="upgrade-btn" id="upgradeBtn">
                    🚀 Level Up!
                </button>
            </form>
        <% } %>
    </div>

    <script>
        // Upgrade stack sistemi
        let upgradeQueue = 0; // Toplam XP stack
        let upgradeTimer = null;
        let isProcessing = false;
        const UPGRADE_DELAY = 2000; // 2 saniye bekle
        const XP_PER_UPGRADE = 2; // Her upgrade için XP
        let currentEnergy = parseInt('<%= energy || 0 %>'); // Controller'dan gelen energy (let ile değiştirilebilir yaptık)
        
        // Energy güncelleme timer'ı
        let energyUpdateTimer = null;

        document.getElementById('upgradeForm')?.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (isProcessing) return; // Eğer işlem devam ediyorsa yeni upgrade'e izin verme
            
            // Energy kontrolü - şu anki queue + yeni XP > energy ise izin verme
            if (upgradeQueue + XP_PER_UPGRADE > currentEnergy) {
                const messageArea = document.getElementById('messageArea');
                messageArea.innerHTML = `<div class="error-message">⚡ Yetersiz enerji! Maksimum ${currentEnergy} XP kullanabilirsiniz.</div>`;
                
                // Mesajı 3 saniye sonra temizle
                setTimeout(() => {
                    messageArea.innerHTML = '';
                }, 3000);
                
                return;
            }
            
            const btn = document.getElementById('upgradeBtn');
            const messageArea = document.getElementById('messageArea');
            
            // Stack'e ekle
            upgradeQueue += XP_PER_UPGRADE;
            
            // UI'ı güncelle
            updateUpgradeButton();
            
            // Timer'ı sıfırla ve yeniden başlat
            if (upgradeTimer) {
                clearTimeout(upgradeTimer);
            }
            
            upgradeTimer = setTimeout(async () => {
                await processUpgradeQueue();
            }, UPGRADE_DELAY);
        });
        
        function updateUpgradeButton() {
            const btn = document.getElementById('upgradeBtn');
            if (!btn) return; // Max level durumunda buton olmayabilir
            
            if (upgradeQueue > 0) {
                btn.textContent = `🚀 Level Up! (+${upgradeQueue} XP)`;
                btn.classList.add('stacked');
            } else {
                btn.textContent = '🚀 Level Up!';
                btn.classList.remove('stacked');
            }
            
            // Energy kontrolü - eğer bir sonraki upgrade için yeterli energy yoksa butonu devre dışı bırak
            if (upgradeQueue + XP_PER_UPGRADE > currentEnergy) {
                btn.disabled = true;
                btn.style.opacity = '0.5';
                btn.title = `Yetersiz enerji! Mevcut: ${currentEnergy}, Gerekli: ${upgradeQueue + XP_PER_UPGRADE}`;
            } else {
                btn.disabled = false;
                btn.style.opacity = '1';
                btn.title = '';
            }
        }
        
        async function processUpgradeQueue() {
            if (upgradeQueue === 0 || isProcessing) return;
            
            isProcessing = true;
            const btn = document.getElementById('upgradeBtn');
            const messageArea = document.getElementById('messageArea');
            const totalXP = upgradeQueue;
            
            // UI'ı güncelle
            btn.disabled = true;
            btn.classList.add('loading');
            btn.textContent = '';
            messageArea.innerHTML = '';

            // Queue'yu sıfırla
            upgradeQueue = 0;
            updateUpgradeButton();
            
            try {
                const requestData = {
                    itemId: document.querySelector('input[name="itemId"]').value,
                    xp: totalXP
                };

                const response = await fetch('/api/game/upgradeItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (response.ok) {
                    messageArea.innerHTML = `<div class="success-message">+${totalXP} XP ekleniyor!</div>`;
                    
                    // Sayfayı yenile (veya sadece verileri güncelle)
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    const result = await response.json();
                    messageArea.innerHTML = `<div class="error-message">${result.message || 'Level yükseltme başarısız!'}</div>`;
                }
                
            } catch (error) {
                messageArea.innerHTML = `<div class="error-message">Bir hata oluştu: ${error.message}</div>`;
            } finally {
                // Butonu tekrar aktif et
                btn.disabled = false;
                btn.classList.remove('loading');
                updateUpgradeButton();
                isProcessing = false;
            }
        }        // Sayfa yüklendiğinde animasyonları başlat
        document.addEventListener('DOMContentLoaded', function() {
            const card = document.querySelector('.game-card');
            const levelBar = document.querySelector('.level-bar');
            
            card.style.opacity = '0';
            card.style.transform = 'translateY(50px)';
            
            // Progress bar'ı ayarla
            const currentXP = parseInt(levelBar.dataset.progress) || 0;
            const maxXP = parseInt(levelBar.dataset.max) || 100;
            const progressPercent = Math.min((currentXP / maxXP) * 100, 100);
            levelBar.style.width = progressPercent + '%';
            
            // Enerji barını güncelle
            updateEnergyBar();
            
            // Upgrade butonunun ilk durumunu ayarla
            updateUpgradeButton();
            
            // Energy güncelleme timer'ını başlat
            startEnergyUpdateTimer();
            
            setTimeout(() => {
                card.style.transition = 'all 0.8s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 100);
        });

        // Sayfa kapatıldığında timer'ları temizle
        window.addEventListener('beforeunload', function() {
            if (energyUpdateTimer) {
                clearTimeout(energyUpdateTimer);
                clearInterval(energyUpdateTimer);
            }
            if (upgradeTimer) {
                clearTimeout(upgradeTimer);
            }
        });

        // Enerji barını güncelle
        function updateEnergyBar() {
            const energyBar = document.querySelector('.energy-bar');
            const energyText = document.querySelector('.energy-text');
            
            if (energyBar && energyText) {
                const maxEnergy = parseInt(energyBar.dataset.maxEnergy);
                const percentage = (currentEnergy / maxEnergy) * 100;
                
                // CSS custom property ile genişliği ayarla
                energyBar.style.setProperty('--energy-percentage', percentage + '%');
                energyText.textContent = `⚡ Enerji: ${currentEnergy} / ${maxEnergy}`;
                
                // Energy data attribute'unu da güncelle
                energyBar.dataset.energy = currentEnergy;
            }
        }

        // Energy'yi API'den güncelle
        async function updateEnergyFromAPI() {
            try {
                const response = await fetch('/api/game/getEnergy', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const newEnergy = result.energy || 0;
                    
                    // Energy değişti mi kontrol et
                    if (newEnergy !== currentEnergy) {
                        console.log(`Energy güncellendi: ${currentEnergy} → ${newEnergy}`);
                        currentEnergy = newEnergy;
                        
                        // UI'ı güncelle
                        updateEnergyBar();
                        updateUpgradeButton(); // Buton durumunu da güncelle
                    }
                } else {
                    console.warn('Energy güncellenirken hata oluştu:', response.status);
                }
            } catch (error) {
                console.error('Energy güncelleme hatası:', error);
            }
        }

        // Energy güncelleme timer'ını başlat
        function startEnergyUpdateTimer() {
            // İlk güncelleme 1 dakika sonra
            energyUpdateTimer = setTimeout(() => {
                updateEnergyFromAPI();
                
                // Sonrasında her dakika güncelle
                energyUpdateTimer = setInterval(updateEnergyFromAPI, 60000); // 60 saniye
            }, 60000); // İlk çalışma 60 saniye sonra
        }
    </script>
</body>
</html>
